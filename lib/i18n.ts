export type Language = "en" | "es"

export const translations = {
  en: {
    // Authentication
    auth: {
      error: "Error",
      success: "Success",
      loginSuccess: "Logged in successfully",
      loginError: "Failed to login. Please check your credentials.",
      signupSuccess: "Account created successfully",
      signupError: "Failed to create account",
      networkError: "Network error. Please try again.",
    },
    // Login Screen
    login: {
      title: "Flutter Component Generator",
      subtitle: "Streamline your component documentation",
      welcomeBack: "Welcome back",
      signInPrompt: "Sign in to start creating component specifications",
      email: "Email",
      password: "Password",
      signIn: "Sign in",
      signingIn: "Signing in...",
      noAccount: "Don't have an account?",
      signUp: "Sign up",
      supabaseReady: "Ready for Supabase integration",
      authPrepared: "Authentication logic prepared in login-screen.tsx",
      whyUse: "Why use this tool?",
      feature1Title: "Multi-step Form Interface",
      feature1Desc: "Break down complex component specifications into manageable steps",
      feature2Title: "Design System Integration",
      feature2Desc: "Predefined tokens for colors, typography, and dimensions from your design system",
      feature3Title: "Live Markdown Preview",
      feature3Desc: "See your component specification generated in real-time as you fill the form",
      feature4Title: "Export & Auto-save",
      feature4Desc: "Export as markdown file and never lose your progress with auto-save",
      perfectFor: "Perfect for:",
      perfectForDesc:
        "Flutter developers, design system maintainers, and teams who want to standardize component documentation for AI-assisted development.",
    },
    // Component Form
    form: {
      stepOf: "Step {current} of {total}",
      quickStart: "Quick Start",
      resetStep: "Reset Step",
      previous: "Previous",
      next: "Next",
      resetStepTitle: "Reset this step?",
      resetStepDesc: "This will clear all data for the current step. This action cannot be undone.",
      cancel: "Cancel",
      reset: "Reset",
    },
    // Steps
    steps: {
      basicInfo: "Basic Info",
      variantsStates: "Variants & States",
      designSpecs: "Design Specs",
      componentAPI: "Component API",
      behavior: "Behavior",
      implementation: "Implementation",
      review: "Review",
    },
    // Basic Info Step
    basicInfo: {
      componentName: "Component Name",
      componentNamePlaceholder: "e.g., TobatiPrimaryButton",
      componentNameHint: "Use PascalCase for component names",
      componentType: "Component Type",
      description: "Description",
      descriptionPlaceholder: "Brief description of what this component does and where it's used...",
      visualReference: "Visual Reference",
      visualReferencePlaceholder: "Describe the component layout, visual hierarchy, and key visual elements...",
      visualReferenceHint: "Provide Figma link or detailed description",
      required: "*",
    },
    // Variants & States Step
    variantsStates: {
      selectVariants: "Select all variants this component needs to support",
      quickStartNote: "Quick Start mode shows essential variants. Disable Quick Start to see all options.",
    },
    // Design Specs Step
    designSpecs: {
      colors: "Colors",
      background: "Background",
      text: "Text",
      border: "Border",
      icons: "Icons",
      selectColor: "Select color",
      typography: "Typography",
      primaryText: "Primary Text",
      secondaryText: "Secondary Text",
      labels: "Labels",
      selectStyle: "Select style",
      dimensions: "Dimensions & Spacing",
      padding: "Padding",
      borderRadius: "Border Radius",
      selectSize: "Select size",
    },
    // Component API Step
    componentAPI: {
      title: "Component Props/Parameters",
      description: "Define the component API using Dart syntax",
      tips: "Tips:",
      tip1: "Use required for mandatory parameters",
      tip2: "Add ? for nullable/optional parameters",
      tip3: "Provide default values where appropriate",
      tip4: "Use proper Dart typing for all parameters",
    },
    // Behavior Step
    behavior: {
      behaviorTitle: "Behavior & Interactions",
      behaviorPlaceholder:
        "Describe how the component behaves: tap/press actions, user input response, internal state, validation logic, keyboard interactions, gesture support...",
      responsiveTitle: "Responsive Behavior",
      responsivePlaceholder:
        "Does size adapt to screen size? Different layouts for breakpoints? Text overflow handling?",
      accessibilityTitle: "Accessibility Requirements",
    },
    // Implementation Step
    implementation: {
      fileLocation: "File Location",
      fileLocationPlaceholder: "lib/core/design_system/components/[category]/[component_name].dart",
      fileLocationHint: "Category: buttons, inputs, cards, navigation, overlays, feedback, etc.",
      needsProvider: "Needs Riverpod Provider?",
      providerStructure: "Provider Structure",
      providerStructurePlaceholder: "Describe the provider structure...",
      consumesProviders: "Consumes Existing Providers",
      consumesProvidersPlaceholder: "List providers this component consumes...",
      validationTitle: "Validation (if applicable)",
      validationRules: "Validation Rules",
      validationRulesPlaceholder: "e.g., Required, min length, email format...",
      validationTiming: "When Validation Occurs",
      validationTimingPlaceholder: "onChange, onBlur, onSubmit...",
      additionalNotes: "Additional Notes",
      additionalNotesPlaceholder: "Any additional context, edge cases, or special requirements...",
    },
    // Review Step
    review: {
      title: "Review Your Component",
      description: "Verify all specifications before exporting the markdown file",
      validationChecklist: "Validation Checklist",
      percentComplete: "% Complete",
      componentSummary: "Component Summary",
      componentName: "Component Name:",
      type: "Type:",
      variants: "Variants:",
      variantsSelected: "selected",
      fileLocation: "File Location:",
      notSet: "Not set",
      exportButton: "Export Markdown",
      completeStepsToExport: "Complete all steps to export",
      allStepsComplete: "All steps complete! Ready to export.",
      incompleteSteps: "Incomplete steps:",
    },
    // Markdown Preview
    preview: {
      title: "Markdown Preview",
      copy: "Copy",
      copied: "Copied",
      copyToClipboard: "Copy to clipboard",
      completeStepsToCopy: "Complete all steps to copy",
      completeStepsWarning: "Complete all required steps to enable copy and export",
      placeholder: "Fill out the form to see the markdown preview...",
    },
    // Signup Screen
    signup: {
      title: "Flutter Component Generator",
      subtitle: "Streamline your component documentation",
      createAccount: "Create your account",
      signupPrompt: "Start documenting your Flutter components today",
      name: "Full Name",
      namePlaceholder: "John Doe",
      email: "Email",
      password: "Password",
      passwordHint: "Must be at least 6 characters",
      confirmPassword: "Confirm Password",
      createAccountButton: "Create Account",
      creatingAccount: "Creating account...",
      haveAccount: "Already have an account?",
      signIn: "Sign in",
      passwordMismatch: "Passwords do not match",
      passwordTooShort: "Password must be at least 6 characters",
      supabaseReady: "Ready for Supabase integration",
      authPrepared: "Authentication logic prepared in signup-screen.tsx",
      getStarted: "Get started in minutes",
      benefit1Title: "Free Forever",
      benefit1Desc: "No credit card required. Start creating component specifications immediately.",
      benefit2Title: "Team Collaboration",
      benefit2Desc: "Share and collaborate on component documentation with your team.",
      benefit3Title: "AI-Ready Documentation",
      benefit3Desc: "Generate markdown files optimized for AI-assisted Flutter development.",
      freeForever: "100% Free:",
      freeForeverDesc: "No hidden costs, no subscriptions. Use all features without limitations.",
    },
  },
  es: {
    // Authentication
    auth: {
      error: "Error",
      success: "Éxito",
      loginSuccess: "Sesión iniciada correctamente",
      loginError: "Error al iniciar sesión. Verifica tus credenciales.",
      signupSuccess: "Cuenta creada correctamente",
      signupError: "Error al crear la cuenta",
      networkError: "Error de red. Por favor, inténtalo de nuevo.",
    },
    // Login Screen
    login: {
      title: "Generador de Componentes Flutter",
      subtitle: "Optimiza la documentación de tus componentes",
      welcomeBack: "Bienvenido de nuevo",
      signInPrompt: "Inicia sesión para comenzar a crear especificaciones de componentes",
      email: "Correo electrónico",
      password: "Contraseña",
      signIn: "Iniciar sesión",
      signingIn: "Iniciando sesión...",
      noAccount: "¿No tienes una cuenta?",
      signUp: "Registrarse",
      supabaseReady: "Listo para integración con Supabase",
      authPrepared: "Lógica de autenticación preparada en login-screen.tsx",
      whyUse: "¿Por qué usar esta herramienta?",
      feature1Title: "Interfaz de Formulario Multi-paso",
      feature1Desc: "Divide especificaciones complejas de componentes en pasos manejables",
      feature2Title: "Integración con Sistema de Diseño",
      feature2Desc: "Tokens predefinidos para colores, tipografía y dimensiones de tu sistema de diseño",
      feature3Title: "Vista Previa de Markdown en Vivo",
      feature3Desc: "Ve tu especificación de componente generada en tiempo real mientras completas el formulario",
      feature4Title: "Exportar y Autoguardado",
      feature4Desc: "Exporta como archivo markdown y nunca pierdas tu progreso con el autoguardado",
      perfectFor: "Perfecto para:",
      perfectForDesc:
        "Desarrolladores Flutter, mantenedores de sistemas de diseño y equipos que desean estandarizar la documentación de componentes para desarrollo asistido por IA.",
    },
    // Component Form
    form: {
      stepOf: "Paso {current} de {total}",
      quickStart: "Inicio Rápido",
      resetStep: "Reiniciar Paso",
      previous: "Anterior",
      next: "Siguiente",
      resetStepTitle: "¿Reiniciar este paso?",
      resetStepDesc: "Esto borrará todos los datos del paso actual. Esta acción no se puede deshacer.",
      cancel: "Cancelar",
      reset: "Reiniciar",
    },
    // Steps
    steps: {
      basicInfo: "Información Básica",
      variantsStates: "Variantes y Estados",
      designSpecs: "Especificaciones de Diseño",
      componentAPI: "API del Componente",
      behavior: "Comportamiento",
      implementation: "Implementación",
      review: "Revisar",
    },
    // Basic Info Step
    basicInfo: {
      componentName: "Nombre del Componente",
      componentNamePlaceholder: "ej., TobatiPrimaryButton",
      componentNameHint: "Usa PascalCase para nombres de componentes",
      componentType: "Tipo de Componente",
      description: "Descripción",
      descriptionPlaceholder: "Breve descripción de qué hace este componente y dónde se usa...",
      visualReference: "Referencia Visual",
      visualReferencePlaceholder: "Describe el diseño del componente, jerarquía visual y elementos visuales clave...",
      visualReferenceHint: "Proporciona enlace de Figma o descripción detallada",
      required: "*",
    },
    // Variants & States Step
    variantsStates: {
      selectVariants: "Selecciona todas las variantes que este componente necesita soportar",
      quickStartNote:
        "El modo Inicio Rápido muestra variantes esenciales. Desactiva Inicio Rápido para ver todas las opciones.",
    },
    // Design Specs Step
    designSpecs: {
      colors: "Colores",
      background: "Fondo",
      text: "Texto",
      border: "Borde",
      icons: "Iconos",
      selectColor: "Seleccionar color",
      typography: "Tipografía",
      primaryText: "Texto Principal",
      secondaryText: "Texto Secundario",
      labels: "Etiquetas",
      selectStyle: "Seleccionar estilo",
      dimensions: "Dimensiones y Espaciado",
      padding: "Relleno",
      borderRadius: "Radio del Borde",
      selectSize: "Seleccionar tamaño",
    },
    // Component API Step
    componentAPI: {
      title: "Props/Parámetros del Componente",
      description: "Define la API del componente usando sintaxis Dart",
      tips: "Consejos:",
      tip1: "Usa required para parámetros obligatorios",
      tip2: "Agrega ? para parámetros opcionales/nulos",
      tip3: "Proporciona valores predeterminados cuando sea apropiado",
      tip4: "Usa tipado Dart adecuado para todos los parámetros",
    },
    // Behavior Step
    behavior: {
      behaviorTitle: "Comportamiento e Interacciones",
      behaviorPlaceholder:
        "Describe cómo se comporta el componente: acciones de toque/presión, respuesta a entrada del usuario, estado interno, lógica de validación, interacciones de teclado, soporte de gestos...",
      responsiveTitle: "Comportamiento Responsivo",
      responsivePlaceholder:
        "¿El tamaño se adapta al tamaño de pantalla? ¿Diferentes diseños para puntos de interrupción? ¿Manejo de desbordamiento de texto?",
      accessibilityTitle: "Requisitos de Accesibilidad",
    },
    // Implementation Step
    implementation: {
      fileLocation: "Ubicación del Archivo",
      fileLocationPlaceholder: "lib/core/design_system/components/[categoría]/[nombre_componente].dart",
      fileLocationHint: "Categoría: buttons, inputs, cards, navigation, overlays, feedback, etc.",
      needsProvider: "¿Necesita Proveedor Riverpod?",
      providerStructure: "Estructura del Proveedor",
      providerStructurePlaceholder: "Describe la estructura del proveedor...",
      consumesProviders: "Consume Proveedores Existentes",
      consumesProvidersPlaceholder: "Lista los proveedores que este componente consume...",
      validationTitle: "Validación (si aplica)",
      validationRules: "Reglas de Validación",
      validationRulesPlaceholder: "ej., Requerido, longitud mínima, formato de correo...",
      validationTiming: "Cuándo Ocurre la Validación",
      validationTimingPlaceholder: "onChange, onBlur, onSubmit...",
      additionalNotes: "Notas Adicionales",
      additionalNotesPlaceholder: "Cualquier contexto adicional, casos extremos o requisitos especiales...",
    },
    // Review Step
    review: {
      title: "Revisa tu Componente",
      description: "Verifica todas las especificaciones antes de exportar el archivo markdown",
      validationChecklist: "Lista de Verificación",
      percentComplete: "% Completo",
      componentSummary: "Resumen del Componente",
      componentName: "Nombre del Componente:",
      type: "Tipo:",
      variants: "Variantes:",
      variantsSelected: "seleccionadas",
      fileLocation: "Ubicación del Archivo:",
      notSet: "No establecido",
      exportButton: "Exportar Markdown",
      completeStepsToExport: "Completa todos los pasos para exportar",
      allStepsComplete: "¡Todos los pasos completos! Listo para exportar.",
      incompleteSteps: "Pasos incompletos:",
    },
    // Markdown Preview
    preview: {
      title: "Vista Previa de Markdown",
      copy: "Copiar",
      copied: "Copiado",
      copyToClipboard: "Copiar al portapapeles",
      completeStepsToCopy: "Completa todos los pasos para copiar",
      completeStepsWarning: "Completa todos los pasos requeridos para habilitar copiar y exportar",
      placeholder: "Completa el formulario para ver la vista previa del markdown...",
    },
    // Signup Screen
    signup: {
      title: "Generador de Componentes Flutter",
      subtitle: "Optimiza la documentación de tus componentes",
      createAccount: "Crea tu cuenta",
      signupPrompt: "Comienza a documentar tus componentes Flutter hoy",
      name: "Nombre Completo",
      namePlaceholder: "Juan Pérez",
      email: "Correo electrónico",
      password: "Contraseña",
      passwordHint: "Debe tener al menos 6 caracteres",
      confirmPassword: "Confirmar Contraseña",
      createAccountButton: "Crear Cuenta",
      creatingAccount: "Creando cuenta...",
      haveAccount: "¿Ya tienes una cuenta?",
      signIn: "Iniciar sesión",
      passwordMismatch: "Las contraseñas no coinciden",
      passwordTooShort: "La contraseña debe tener al menos 6 caracteres",
      supabaseReady: "Listo para integración con Supabase",
      authPrepared: "Lógica de autenticación preparada en signup-screen.tsx",
      getStarted: "Comienza en minutos",
      benefit1Title: "Gratis Para Siempre",
      benefit1Desc: "No se requiere tarjeta de crédito. Comienza a crear especificaciones de componentes de inmediato.",
      benefit2Title: "Colaboración en Equipo",
      benefit2Desc: "Comparte y colabora en la documentación de componentes con tu equipo.",
      benefit3Title: "Documentación Lista para IA",
      benefit3Desc: "Genera archivos markdown optimizados para desarrollo Flutter asistido por IA.",
      freeForever: "100% Gratis:",
      freeForeverDesc: "Sin costos ocultos, sin suscripciones. Usa todas las funciones sin limitaciones.",
    },
  },
} as const

export function useTranslation(lang: Language) {
  return translations[lang]
}
